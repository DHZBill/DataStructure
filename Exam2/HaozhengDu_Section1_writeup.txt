CS230 Midterm Exam 2By Haozheng DuProblem 1:a. Good programming practices I have learnt so far:1. Use exception handlers to solve problems.2. Implement different sorting methods for different data.3. Use a lot of print statements for debugging.4. Name the variables’ names properly and conventionallyb. 1. I learned about this practice from Lecture 7, where we talked about how to       use exception handlers. After that class, I started to think more about possible exceptions the program might throw when I was writing codes. For example, in the Midterm Exam 1, I thought a lot about exceptions handling and I implemented it in Question11: WordList.           2.I learned about this practice from Lecture 12: Searching and Sorting. I     learned about Selection Sort, Insertion Sort, Bubble Sort, Merge Sort, and Quick Sort. Except for Bubble Sort, all of these sorting methods have their pros and cons. In Assignment 6, I explored on how these methods behave differently, but I haven’t got an opportunity to test all these sorting methods for different data sets.3. I learned about this practice from the very first Assignment. I encounters    different bugs in almost every program I wrote, and writing print statements has always been a good practice to debug. I did this in every previous assignments but had them deleted after the debugging. Now, back from Task 4 in this Exam, I see myself using a lot of print statements:  public void playOneRound(){//    for(int i = 0; i < 10; i++)//      table.get(i).flip();    printTable();    String s = "";    ...I was having trouble matching 2 cards, so I simply revealed every card on the table for debugging.        4.  I learned about naming variables from the very first class, and kept            improving as the semester goes on. I used to like using single characters, but I learned that it was not a good practice. For example, naming an integer “index” instead of i when there are multiple ‘”i”s in loops, and naming a LinkedQueue linkedQueue are both good practices.Problem 2:a. The method that throws an exception:public static void main(String[] args){    String s = null;    s.length();    }   The method with an exception handler:public static void main(String[] args){    String s = null;    try{s.length();}    catch(NullPointerException e)	System.out.println(“Give s a value”);    }b. (i) True The highest exponent in the polynomial is 4, so the big-O notation is     O(n^4);(ii) FalseThe highest exponent in the polynomial is 3, so the big-O notation is O(n^3) instead of O(n^2);(iii) FalseFollowing the rules mentioned above, we only need to compare 2^n and n^20. As n grows bigger and bigger, 2^n will be much bigger than n^20. So the big-O notation should be O(2^n).(iv) True      Same explanation as in (iii).(v) TrueExpanding (n+100)^2 we get an n^2 but it is smaller than n^2*log(n) when n grows bigger. So the big-O notation is O(n^2log(n)).